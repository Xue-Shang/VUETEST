/**
 * 作用域
 * 1.理解
 *  就是一块“地盘”，一个代码段所在的区域
 *  它是静态的（相对于上下文对象），在编写代码时就确认了
 * 2.分类
 *  全局作用域
 *  函数作用域
 *  没有快作用域（ES6有了）
 * 3.作用
 *  隔离变量，不同作用域下同名变量不会有冲突
 */
var a=10,b=20
function fn(x){
    var a=100,
        c=300;
    console.log('fn()',a,b,c,x)
    function bar(x){
        var a=1000,
            d=400;
        console.log('bar()',a,b,c,d,x)
    }
    bar(100)
    bar(200)
}
fn(10)

 /**作用域链
  * 1.理解
  *     多个上下级关系的作用域形成的链，它的方向是从下向上的（从内到外）
  *     查找一个变量时就是沿着作用域链来查找的
  * 2.查找一个变量的查找规则
  *     在当前作用域下的执行上下文中查找对于的属性，如果有直接返回，否则进入2
  *     在上一级作用域的智能型上下文查找对于的属性，如果有直接返回，否则进入3
  *     再次执行2的相同操作，直到全局作用域，如果还找不到就抛出找不到的异常
  */

  var a=1
  function fn1(){
      var b=2
      function fn2(){
          var c=3
          console.log(c)
          console.log(b)
          console.log(a)
          console.log(d)
      }
  }